{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/assets/IMG_1939.JPG","path":"assets/IMG_1939.JPG","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Dockerfile构建Java8和Python3.6环境.md","hash":"3295efead83fbdab005b3b5d8032a15ad7aa2bb3","modified":1635759195403},{"_id":"source/_posts/Dockerfile中安装git-区分alpine和非alpine环境.md","hash":"d8063c06cb3d6e4a37aaf881cb96dafdca5a4674","modified":1635759831049},{"_id":"source/_posts/iTerm2-oh-my-zsh最全配置.md","hash":"a655f9398ae3d4730ee711234d48056da07a48c4","modified":1633940731993},{"_id":"source/_posts/kafka安装-for-Mac-并实例生产者消费者-且打包jar文件服务器运行.md","hash":"6266c7d59a8d88742359ebd9db319cdb50823a8a","modified":1633942868921},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636443092695},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1636443092690},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1636443092690},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1636443092690},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1636443092690},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1636443092689},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1636443092708},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1636443092690},{"_id":"themes/yilia/_config.yml","hash":"371371b49444639e874868c7d3faa4c672fd92d3","modified":1636445514032},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1636443092696},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1636443092690},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1636443092690},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1636443092691},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1636443092690},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1636443092691},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1636443092691},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1636443092706},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1636443092690},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1636443092707},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1636443092691},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1636443092695},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1636443092696},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1636443092696},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1636443092696},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1636443092695},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1636443092696},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1636443092696},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1636443092704},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1636443092704},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1636443092704},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1636443092696},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1636443092705},{"_id":"themes/yilia/source/404.html","hash":"cb51e87bcea5d6d5c4567bccdaaa86421fa62d98","modified":1636446128495},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1636443092705},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1636443092705},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1636443092705},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1636443092705},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1636443092691},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1636443092705},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1636443092692},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1636443092692},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"8a14f530b12ef8798def4b4cf78c15c825ad2abb","modified":1637292073018},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1636443092692},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1636443092692},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1636443092704},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1636443092692},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1636443092691},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1636443092691},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1636443092692},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1636443092692},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"22277d9568c1c2f8205ff36b6738401ca9ef5b0d","modified":1636444744022},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1636443092695},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1636443092695},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1636443092692},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1636443092703},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1636443092703},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"b676600ad517a68c6acdf693c5b6b96dac35da31","modified":1636443383859},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1636443092703},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1636443092703},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1636443092703},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1636443092703},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1636443092703},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1636443092703},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1636443092704},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1636443092697},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1636443092703},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1636443092697},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1636443092703},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1636443092704},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1636443092697},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1636443092697},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1636443092697},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1636443092698},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1636443092697},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1636443092697},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1636443092698},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1636443092700},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1636443092697},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1636443092700},{"_id":"themes/yilia/source-src/css/declare.scss","hash":"b12e83f7ba2fe9c5c4b52a9cbac828370a96fd9c","modified":1636443848131},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1636443092701},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1636443092700},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1636443092701},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1636443092701},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1636443092701},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1636443092702},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1636443092700},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1636443092701},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1636443092702},{"_id":"themes/yilia/source-src/css/main.scss","hash":"6b8c868090c10c18f647a9d771bbdf0323458c92","modified":1636443883079},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1636443092702},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1636443092702},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1636443092702},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1636443092702},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1636443092693},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1636443092702},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1636443092693},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1636443092693},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1636443092693},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1636443092693},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1636443092693},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1636443092694},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1636443092693},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1636443092693},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1636443092698},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1636443092698},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1636443092698},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1636443092698},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1636443092699},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1636443092700},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1636443092699},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1636443092701},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1636443092698},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1636443092700},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1636443092701},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1636443092693},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1636443092701},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1636443092706},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1636443092707},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1636443092695},{"_id":"themes/yilia/source/assets/IMG_1939.JPG","hash":"2dff3384b672fad1977058673afe92c8dc2dad29","modified":1636445258119},{"_id":"public/content.json","hash":"12acdb3000945a84f16faae6f0505a38fc26f770","modified":1637292078692},{"_id":"public/2021/11/01/Dockerfile中安装git-区分alpine和非alpine环境/index.html","hash":"f2c7ea2de3f80ec7a4e8ed095ccb3f136dd0f968","modified":1637292078692},{"_id":"public/2021/11/01/Dockerfile构建Java8和Python3.6环境/index.html","hash":"b745742aea45211876f8ac4f3ce9c211d791391c","modified":1637292078692},{"_id":"public/2021/09/30/iTerm2-oh-my-zsh最全配置/index.html","hash":"58eba82bc893db47a0b0fa84414ef1e5349c9e9f","modified":1637292078692},{"_id":"public/2021/10/11/kafka安装-for-Mac-并实例生产者消费者-且打包jar文件服务器运行/index.html","hash":"bec9464df3645d977266ec39d08969c1717a6b76","modified":1637292078692},{"_id":"public/archives/2021/index.html","hash":"48a86faa23cb524d50620152c3de3949c685b5dc","modified":1637292078692},{"_id":"public/archives/index.html","hash":"3f5acf7cbb6ae2b349be98bc046b2f0a861cc1c1","modified":1637292078692},{"_id":"public/archives/2021/10/index.html","hash":"c5e020f538188a3c4bd43a78763ae89264f4d1ff","modified":1637292078692},{"_id":"public/archives/2021/11/index.html","hash":"01d2f990e2242f846780e998cbf214ae9e51bc56","modified":1637292078692},{"_id":"public/archives/2021/09/index.html","hash":"940a5f62c8906542d7c634031279d4c50494828e","modified":1637292078692},{"_id":"public/tags/Docker/index.html","hash":"60ba17a6b9a283cef713a8ff7df9e831ac7a17b1","modified":1637292078692},{"_id":"public/tags/Linux/index.html","hash":"7b0463a72bdf6048d3430b5971806c622224b1d1","modified":1637292078692},{"_id":"public/tags/kafka/index.html","hash":"658f2a5ccb7c61a6eeac846dec77cc05022a08aa","modified":1637292078692},{"_id":"public/tags/Mac/index.html","hash":"6c207ba10229254a09c92c2951c01ebeb2dcc415","modified":1637292078692},{"_id":"public/tags/alpine/index.html","hash":"0128d5d8d7de1bc0cb9806fc396f5c002be70008","modified":1637292078692},{"_id":"public/index.html","hash":"fb3ae62c9f5a703c90ac6d936fb93ccbf546fc2a","modified":1637292078692},{"_id":"public/tags/oh-my-zsh/index.html","hash":"b5d0380b305450cbd1c85784cbc67506f98ed837","modified":1637292078692},{"_id":"public/tags/iTem2/index.html","hash":"cd135ddbca0dba1e53927d669af0fff6f40ddc34","modified":1637292078692},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1637292078692},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1637292078692},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1637292078692},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1637292078692},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1637292078692},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1637292078692},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1637292078692},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1637292078692},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1637292078692},{"_id":"public/404.html","hash":"cb51e87bcea5d6d5c4567bccdaaa86421fa62d98","modified":1637292078692},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1637292078692},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1637292078692},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1637292078692},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1637292078692},{"_id":"public/assets/IMG_1939.JPG","hash":"2dff3384b672fad1977058673afe92c8dc2dad29","modified":1637292078692}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Dockerfile构建Java8和Python3.6环境","date":"2021-11-01T09:24:08.000Z","_content":"# 一. Dockerfile构建脚本:\n```\n# docker pull xinximo/java8-python3.6\n# Author: xinximo\n# Version: 2021-10-27\n\n\nFROM python:3.6-alpine\n\nMAINTAINER xinximo \"woshiwangxin123@126.com\"\n\nENV LANG C.UTF-8\nRUN { \\\n        echo '#!/bin/sh'; \\\n        echo 'set -e'; \\\n        echo; \\\n        echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n    } > /usr/local/bin/docker-java-home \\\n    && chmod +x /usr/local/bin/docker-java-home\nENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk\nENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin\n\nENV JAVA_VERSION 8u282\nENV JAVA_ALPINE_VERSION 8.282.08-r1\n\nRUN set -x \\\n    && apk add --no-cache openjdk8=\"$JAVA_ALPINE_VERSION\" \\\n    && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]\n<!--more-->\n# 工作目录\nWORKDIR /app\n\n# 解决时区问题\nENV TZ \"Asia/Shanghai\"\n\n# 终端设置\n# 默认值是dumb，这时在终端操作时可能会出现：terminal is not fully functional\nENV TERM xterm\n\n#pythonpath\nENV PYTHONPATH=\"/app:$PYTHONPATH\"\n```\n# 二. 拉取镜像并运行\n注意:因为在Mac和Linux系统镜像构建时的核心有区别,会导致互相运行时概率报错,请使用对应的镜像: \\\nMac下运行:\n```\ndocker pull xinximo/java8-python3.6\ndocker run -it --rm --name xinximo/java8-python3.6 xinximo/java8-python3.6 sh\n```\nLinux下运行:\n```\ndocker pull xinximo/java8-python3.6-linux\ndocker run -it --rm --name xinximo/java8-python3.6-linux xinximo/java8-python3.6-linux sh\n```\n\n","source":"_posts/Dockerfile构建Java8和Python3.6环境.md","raw":"---\ntitle: Dockerfile构建Java8和Python3.6环境\ndate: 2021-11-01 17:24:08\ntags: [Docker, Linux]\n---\n# 一. Dockerfile构建脚本:\n```\n# docker pull xinximo/java8-python3.6\n# Author: xinximo\n# Version: 2021-10-27\n\n\nFROM python:3.6-alpine\n\nMAINTAINER xinximo \"woshiwangxin123@126.com\"\n\nENV LANG C.UTF-8\nRUN { \\\n        echo '#!/bin/sh'; \\\n        echo 'set -e'; \\\n        echo; \\\n        echo 'dirname \"$(dirname \"$(readlink -f \"$(which javac || which java)\")\")\"'; \\\n    } > /usr/local/bin/docker-java-home \\\n    && chmod +x /usr/local/bin/docker-java-home\nENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk\nENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin\n\nENV JAVA_VERSION 8u282\nENV JAVA_ALPINE_VERSION 8.282.08-r1\n\nRUN set -x \\\n    && apk add --no-cache openjdk8=\"$JAVA_ALPINE_VERSION\" \\\n    && [ \"$JAVA_HOME\" = \"$(docker-java-home)\" ]\n<!--more-->\n# 工作目录\nWORKDIR /app\n\n# 解决时区问题\nENV TZ \"Asia/Shanghai\"\n\n# 终端设置\n# 默认值是dumb，这时在终端操作时可能会出现：terminal is not fully functional\nENV TERM xterm\n\n#pythonpath\nENV PYTHONPATH=\"/app:$PYTHONPATH\"\n```\n# 二. 拉取镜像并运行\n注意:因为在Mac和Linux系统镜像构建时的核心有区别,会导致互相运行时概率报错,请使用对应的镜像: \\\nMac下运行:\n```\ndocker pull xinximo/java8-python3.6\ndocker run -it --rm --name xinximo/java8-python3.6 xinximo/java8-python3.6 sh\n```\nLinux下运行:\n```\ndocker pull xinximo/java8-python3.6-linux\ndocker run -it --rm --name xinximo/java8-python3.6-linux xinximo/java8-python3.6-linux sh\n```\n\n","slug":"Dockerfile构建Java8和Python3.6环境","published":1,"updated":"2021-11-01T09:33:15.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw5tfhe700001r0184q0ff8q","content":"<h1 id=\"一-Dockerfile构建脚本\"><a href=\"#一-Dockerfile构建脚本\" class=\"headerlink\" title=\"一. Dockerfile构建脚本:\"></a>一. Dockerfile构建脚本:</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker pull xinximo/java8-python3.6</span><br><span class=\"line\"># Author: xinximo</span><br><span class=\"line\"># Version: 2021-10-27</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">FROM python:3.6-alpine</span><br><span class=\"line\"></span><br><span class=\"line\">MAINTAINER xinximo &quot;woshiwangxin123@126.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\">RUN &#123; \\</span><br><span class=\"line\">        echo &#x27;#!/bin/sh&#x27;; \\</span><br><span class=\"line\">        echo &#x27;set -e&#x27;; \\</span><br><span class=\"line\">        echo; \\</span><br><span class=\"line\">        echo &#x27;dirname &quot;$(dirname &quot;$(readlink -f &quot;$(which javac || which java)&quot;)&quot;)&quot;&#x27;; \\</span><br><span class=\"line\">    &#125; &gt; /usr/local/bin/docker-java-home \\</span><br><span class=\"line\">    &amp;&amp; chmod +x /usr/local/bin/docker-java-home</span><br><span class=\"line\">ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk</span><br><span class=\"line\">ENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin</span><br><span class=\"line\"></span><br><span class=\"line\">ENV JAVA_VERSION 8u282</span><br><span class=\"line\">ENV JAVA_ALPINE_VERSION 8.282.08-r1</span><br><span class=\"line\"></span><br><span class=\"line\">RUN set -x \\</span><br><span class=\"line\">    &amp;&amp; apk add --no-cache openjdk8=&quot;$JAVA_ALPINE_VERSION&quot; \\</span><br><span class=\"line\">    &amp;&amp; [ &quot;$JAVA_HOME&quot; = &quot;$(docker-java-home)&quot; ]</span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\"># 工作目录</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"># 解决时区问题</span><br><span class=\"line\">ENV TZ &quot;Asia/Shanghai&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 终端设置</span><br><span class=\"line\"># 默认值是dumb，这时在终端操作时可能会出现：terminal is not fully functional</span><br><span class=\"line\">ENV TERM xterm</span><br><span class=\"line\"></span><br><span class=\"line\">#pythonpath</span><br><span class=\"line\">ENV PYTHONPATH=&quot;/app:$PYTHONPATH&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"二-拉取镜像并运行\"><a href=\"#二-拉取镜像并运行\" class=\"headerlink\" title=\"二. 拉取镜像并运行\"></a>二. 拉取镜像并运行</h1><p>注意:因为在Mac和Linux系统镜像构建时的核心有区别,会导致互相运行时概率报错,请使用对应的镜像: <br>Mac下运行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull xinximo/java8-python3.6</span><br><span class=\"line\">docker run -it --rm --name xinximo/java8-python3.6 xinximo/java8-python3.6 sh</span><br></pre></td></tr></table></figure>\n<p>Linux下运行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull xinximo/java8-python3.6-linux</span><br><span class=\"line\">docker run -it --rm --name xinximo/java8-python3.6-linux xinximo/java8-python3.6-linux sh</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-Dockerfile构建脚本\"><a href=\"#一-Dockerfile构建脚本\" class=\"headerlink\" title=\"一. Dockerfile构建脚本:\"></a>一. Dockerfile构建脚本:</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># docker pull xinximo/java8-python3.6</span><br><span class=\"line\"># Author: xinximo</span><br><span class=\"line\"># Version: 2021-10-27</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">FROM python:3.6-alpine</span><br><span class=\"line\"></span><br><span class=\"line\">MAINTAINER xinximo &quot;woshiwangxin123@126.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ENV LANG C.UTF-8</span><br><span class=\"line\">RUN &#123; \\</span><br><span class=\"line\">        echo &#x27;#!/bin/sh&#x27;; \\</span><br><span class=\"line\">        echo &#x27;set -e&#x27;; \\</span><br><span class=\"line\">        echo; \\</span><br><span class=\"line\">        echo &#x27;dirname &quot;$(dirname &quot;$(readlink -f &quot;$(which javac || which java)&quot;)&quot;)&quot;&#x27;; \\</span><br><span class=\"line\">    &#125; &gt; /usr/local/bin/docker-java-home \\</span><br><span class=\"line\">    &amp;&amp; chmod +x /usr/local/bin/docker-java-home</span><br><span class=\"line\">ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk</span><br><span class=\"line\">ENV PATH $PATH:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin</span><br><span class=\"line\"></span><br><span class=\"line\">ENV JAVA_VERSION 8u282</span><br><span class=\"line\">ENV JAVA_ALPINE_VERSION 8.282.08-r1</span><br><span class=\"line\"></span><br><span class=\"line\">RUN set -x \\</span><br><span class=\"line\">    &amp;&amp; apk add --no-cache openjdk8=&quot;$JAVA_ALPINE_VERSION&quot; \\</span><br><span class=\"line\">    &amp;&amp; [ &quot;$JAVA_HOME&quot; = &quot;$(docker-java-home)&quot; ]</span><br><span class=\"line\">&lt;!--more--&gt;</span><br><span class=\"line\"># 工作目录</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\"></span><br><span class=\"line\"># 解决时区问题</span><br><span class=\"line\">ENV TZ &quot;Asia/Shanghai&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 终端设置</span><br><span class=\"line\"># 默认值是dumb，这时在终端操作时可能会出现：terminal is not fully functional</span><br><span class=\"line\">ENV TERM xterm</span><br><span class=\"line\"></span><br><span class=\"line\">#pythonpath</span><br><span class=\"line\">ENV PYTHONPATH=&quot;/app:$PYTHONPATH&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"二-拉取镜像并运行\"><a href=\"#二-拉取镜像并运行\" class=\"headerlink\" title=\"二. 拉取镜像并运行\"></a>二. 拉取镜像并运行</h1><p>注意:因为在Mac和Linux系统镜像构建时的核心有区别,会导致互相运行时概率报错,请使用对应的镜像: <br>Mac下运行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull xinximo/java8-python3.6</span><br><span class=\"line\">docker run -it --rm --name xinximo/java8-python3.6 xinximo/java8-python3.6 sh</span><br></pre></td></tr></table></figure>\n<p>Linux下运行:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull xinximo/java8-python3.6-linux</span><br><span class=\"line\">docker run -it --rm --name xinximo/java8-python3.6-linux xinximo/java8-python3.6-linux sh</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Dockerfile中安装git,区分alpine和非alpine环境","date":"2021-11-01T09:41:20.000Z","_content":"# 安装配置\nalpine环境安装:\n```\n# install git - apt-get replace with apk\nRUN apk update && \\\n    apk upgrade && \\\n    apk add --no-cache bash git openssh\n```\n非alpine环境安装:\n```\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install -y git\n```\n\n","source":"_posts/Dockerfile中安装git-区分alpine和非alpine环境.md","raw":"---\ntitle: 'Dockerfile中安装git,区分alpine和非alpine环境'\ndate: 2021-11-01 17:41:20\ntags: [Docker, alpine]\n---\n# 安装配置\nalpine环境安装:\n```\n# install git - apt-get replace with apk\nRUN apk update && \\\n    apk upgrade && \\\n    apk add --no-cache bash git openssh\n```\n非alpine环境安装:\n```\nRUN apt-get update && \\\n    apt-get upgrade -y && \\\n    apt-get install -y git\n```\n\n","slug":"Dockerfile中安装git-区分alpine和非alpine环境","published":1,"updated":"2021-11-01T09:43:51.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw5tfhe900011r019mus1sz0","content":"<h1 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h1><p>alpine环境安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># install git - apt-get replace with apk</span><br><span class=\"line\">RUN apk update &amp;&amp; \\</span><br><span class=\"line\">    apk upgrade &amp;&amp; \\</span><br><span class=\"line\">    apk add --no-cache bash git openssh</span><br></pre></td></tr></table></figure>\n<p>非alpine环境安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; \\</span><br><span class=\"line\">    apt-get upgrade -y &amp;&amp; \\</span><br><span class=\"line\">    apt-get install -y git</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h1><p>alpine环境安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># install git - apt-get replace with apk</span><br><span class=\"line\">RUN apk update &amp;&amp; \\</span><br><span class=\"line\">    apk upgrade &amp;&amp; \\</span><br><span class=\"line\">    apk add --no-cache bash git openssh</span><br></pre></td></tr></table></figure>\n<p>非alpine环境安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RUN apt-get update &amp;&amp; \\</span><br><span class=\"line\">    apt-get upgrade -y &amp;&amp; \\</span><br><span class=\"line\">    apt-get install -y git</span><br></pre></td></tr></table></figure>\n\n"},{"title":"kafka安装(for Mac)并实例生产者消费者,且打包jar文件服务器运行","date":"2021-10-11T08:26:29.000Z","top":true,"_content":"# kafka安装for Mac\n## 1.brew安装\n```\nbrew install kafka\n```\n## 2.本地调试kafka\n安装完毕后,生成安装路径和配置路径:\n```\n /usr/local/Cellar/kafka/2.7.0/bin\n /usr/local/etc/kafka/\n```\n启动zookeeper依赖:\n```\ncd /usr/local/Cellar/kafka/2.7.0/bin\n\nzookeeper-server-start /usr/local/etc/kafka/zookeeper.properties\n```\n启动kafka:\n```\ncd /usr/local/Cellar/kafka/2.7.0/bin\n\nkafka-server-start /usr/local/etc/kafka/server.properties\n```\n<!--more-->\n创建一个topic:\n```\ncd /usr/local/Cellar/kafka/2.7.0/bin\n\nkafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n```\n```\n--create #创建主题命令\n--zookeeper localhost:2181 #指定zookeeper\n--replication-factor 1 #指定副本个数\n--partitions 1 #指定分区个数\n--topic test #主题名称为test\n```\n查看topic:\n```\nkafka-topics --list --zookeeper localhost:2181\n```\n创建一个生产者:\n```\nkafka-console-producer --broker-list localhost:9092 --topic test\n```\n创建一个消费者:\n```\nkafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning\n```\n生产者发送消息即可在消费者接受消息\n## 3.连接远程服务器kafka接收消息\n修改Kafka配置文件以下三个参数,listeners和host.name写上kafka broker主机的地址,这个地址不配置会造成远程无法访问:\n```\nvim /usr/local/etc/kafka/server.properties\n\nzookeeper.connect=localhost:2181\nlisteners=PLAINTEXT://远程服务器IP:9092\nhost.name=远程服务器IP\n```\n启动消费者接收消息:topic为remote\n```\nkafka-console-consumer --bootstrap-server 远程服务器IP:9092 --topic remote\n```\n\n# 实例生产者消费者\n## 1.配置项目文件pom.xml安装依赖\n```\n<dependencies>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-clients</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka_2.12</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n</dependencies>\n```\n在pom.xml文件dependencies中加入以上kafka依赖并在项目命令行中执行以下命令安装:\n```\nmvn clean install\n```\n## 2.IDEA中实例生产者代码\n```\npackage kafka;\n\nimport java.util.*;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\n\npublic class SendMessages {\n    //发送消息的topic,此处注意该topic需要在服务器已被创建\n    public static final String WebhookChannelTopic = \"test-webhook\";\n    private final KafkaProducer<String, String> producer;\n   \n    public SendMessages() {\n        Properties props = new Properties();\n        //指定代理服务器的地址,直接部署在对应的服务器所以直接本地访问\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        producer = new KafkaProducer<String, String>(props);\n\n    }\n    public void produce() {\n    \t//指定发送100W条数据\n        int count = 1000000;\n        ExecutorService executor = Executors.newFixedThreadPool(4);\n        for (int i = 0; i < count; i++) {\n            final String key = String.valueOf(i);\n            final String kafkaMsg = \"test-webhook-\" + i;\n            executor.submit(new Runnable() {\n\n                @Override\n                public void run() {\n                    producer.send(new ProducerRecord<String, String>(WebhookChannelTopic, kafkaMsg));\n                }\n            });\n\n        }\n    }\n    public static void main(String[] args) {\n        SendMessages a = new SendMessages();\n        a.produce();\n        System.out.println(\"success\");\n    }\n}\n```\n\n# 打包jar文件在服务器运行程序\n## 1.开始打包(方法一)\n![开始打包](https://img-blog.csdnimg.cn/2021040611514776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n## 2.生成配置文件\n选择主类运行文件并生成配置文件MANIFEST.MF在项目的src路径下:\n![生成配置文件](https://img-blog.csdnimg.cn/2021040611555273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n![jar文件](https://img-blog.csdnimg.cn/2021040611584255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n## 3.生成jar文件\n构建项目并打包生成jar文件:\n![构建项目](https://img-blog.csdnimg.cn/20210406134959868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n![生成jar文件](https://img-blog.csdnimg.cn/20210406135135476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n![生成成功](https://img-blog.csdnimg.cn/20210406135307499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n## 4.利用org.apache.maven.plugins插件打包(方法二)\n在项目的pom.xml文件中```<project></project>```内插入以下代码(mainClass中填入自己运行类的包名和文件名):\n![包名](https://img-blog.csdnimg.cn/20210408142713759.png)\n```\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>3.1.0</version>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <transformers>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <mainClass>kafka.SendMessages</mainClass>\n                                </transformer>\n                            </transformers>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n```\n执行打包命令,打包成功后会生成jar文件在项目的target目录下:\n```\nmvn clean package\n```\n\n## 5.scp到服务器运行\ncd到jar文件所在目录执行scp命令:\n```\nscp xxx.jar root@xxx.xx.xx.xx:~\n```\n运行程序:\n```\njava -jar xxx.jar\n```\n\n## 6.测试消息发送成功\n可以在服务器起一个本地消费者:\n```\n# cd到服务器kafka的执行目录,具体步骤参考本地测试部分\n\n./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-webhook --from-beginning\n```\n","source":"_posts/kafka安装-for-Mac-并实例生产者消费者-且打包jar文件服务器运行.md","raw":"---\ntitle: 'kafka安装(for Mac)并实例生产者消费者,且打包jar文件服务器运行'\ndate: 2021-10-11 16:26:29\ntags: [kafka, Mac]\ntop: true\n---\n# kafka安装for Mac\n## 1.brew安装\n```\nbrew install kafka\n```\n## 2.本地调试kafka\n安装完毕后,生成安装路径和配置路径:\n```\n /usr/local/Cellar/kafka/2.7.0/bin\n /usr/local/etc/kafka/\n```\n启动zookeeper依赖:\n```\ncd /usr/local/Cellar/kafka/2.7.0/bin\n\nzookeeper-server-start /usr/local/etc/kafka/zookeeper.properties\n```\n启动kafka:\n```\ncd /usr/local/Cellar/kafka/2.7.0/bin\n\nkafka-server-start /usr/local/etc/kafka/server.properties\n```\n<!--more-->\n创建一个topic:\n```\ncd /usr/local/Cellar/kafka/2.7.0/bin\n\nkafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test\n```\n```\n--create #创建主题命令\n--zookeeper localhost:2181 #指定zookeeper\n--replication-factor 1 #指定副本个数\n--partitions 1 #指定分区个数\n--topic test #主题名称为test\n```\n查看topic:\n```\nkafka-topics --list --zookeeper localhost:2181\n```\n创建一个生产者:\n```\nkafka-console-producer --broker-list localhost:9092 --topic test\n```\n创建一个消费者:\n```\nkafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning\n```\n生产者发送消息即可在消费者接受消息\n## 3.连接远程服务器kafka接收消息\n修改Kafka配置文件以下三个参数,listeners和host.name写上kafka broker主机的地址,这个地址不配置会造成远程无法访问:\n```\nvim /usr/local/etc/kafka/server.properties\n\nzookeeper.connect=localhost:2181\nlisteners=PLAINTEXT://远程服务器IP:9092\nhost.name=远程服务器IP\n```\n启动消费者接收消息:topic为remote\n```\nkafka-console-consumer --bootstrap-server 远程服务器IP:9092 --topic remote\n```\n\n# 实例生产者消费者\n## 1.配置项目文件pom.xml安装依赖\n```\n<dependencies>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka-clients</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.kafka</groupId>\n            <artifactId>kafka_2.12</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n</dependencies>\n```\n在pom.xml文件dependencies中加入以上kafka依赖并在项目命令行中执行以下命令安装:\n```\nmvn clean install\n```\n## 2.IDEA中实例生产者代码\n```\npackage kafka;\n\nimport java.util.*;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\n\npublic class SendMessages {\n    //发送消息的topic,此处注意该topic需要在服务器已被创建\n    public static final String WebhookChannelTopic = \"test-webhook\";\n    private final KafkaProducer<String, String> producer;\n   \n    public SendMessages() {\n        Properties props = new Properties();\n        //指定代理服务器的地址,直接部署在对应的服务器所以直接本地访问\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        producer = new KafkaProducer<String, String>(props);\n\n    }\n    public void produce() {\n    \t//指定发送100W条数据\n        int count = 1000000;\n        ExecutorService executor = Executors.newFixedThreadPool(4);\n        for (int i = 0; i < count; i++) {\n            final String key = String.valueOf(i);\n            final String kafkaMsg = \"test-webhook-\" + i;\n            executor.submit(new Runnable() {\n\n                @Override\n                public void run() {\n                    producer.send(new ProducerRecord<String, String>(WebhookChannelTopic, kafkaMsg));\n                }\n            });\n\n        }\n    }\n    public static void main(String[] args) {\n        SendMessages a = new SendMessages();\n        a.produce();\n        System.out.println(\"success\");\n    }\n}\n```\n\n# 打包jar文件在服务器运行程序\n## 1.开始打包(方法一)\n![开始打包](https://img-blog.csdnimg.cn/2021040611514776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n## 2.生成配置文件\n选择主类运行文件并生成配置文件MANIFEST.MF在项目的src路径下:\n![生成配置文件](https://img-blog.csdnimg.cn/2021040611555273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n![jar文件](https://img-blog.csdnimg.cn/2021040611584255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n## 3.生成jar文件\n构建项目并打包生成jar文件:\n![构建项目](https://img-blog.csdnimg.cn/20210406134959868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n![生成jar文件](https://img-blog.csdnimg.cn/20210406135135476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n![生成成功](https://img-blog.csdnimg.cn/20210406135307499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70)\n## 4.利用org.apache.maven.plugins插件打包(方法二)\n在项目的pom.xml文件中```<project></project>```内插入以下代码(mainClass中填入自己运行类的包名和文件名):\n![包名](https://img-blog.csdnimg.cn/20210408142713759.png)\n```\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>1.8</source>\n                    <target>1.8</target>\n                </configuration>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>3.1.0</version>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <transformers>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <mainClass>kafka.SendMessages</mainClass>\n                                </transformer>\n                            </transformers>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n```\n执行打包命令,打包成功后会生成jar文件在项目的target目录下:\n```\nmvn clean package\n```\n\n## 5.scp到服务器运行\ncd到jar文件所在目录执行scp命令:\n```\nscp xxx.jar root@xxx.xx.xx.xx:~\n```\n运行程序:\n```\njava -jar xxx.jar\n```\n\n## 6.测试消息发送成功\n可以在服务器起一个本地消费者:\n```\n# cd到服务器kafka的执行目录,具体步骤参考本地测试部分\n\n./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-webhook --from-beginning\n```\n","slug":"kafka安装-for-Mac-并实例生产者消费者-且打包jar文件服务器运行","published":1,"updated":"2021-10-11T09:01:08.921Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw5tfheb00031r0173sbfcaa","content":"<h1 id=\"kafka安装for-Mac\"><a href=\"#kafka安装for-Mac\" class=\"headerlink\" title=\"kafka安装for Mac\"></a>kafka安装for Mac</h1><h2 id=\"1-brew安装\"><a href=\"#1-brew安装\" class=\"headerlink\" title=\"1.brew安装\"></a>1.brew安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install kafka</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-本地调试kafka\"><a href=\"#2-本地调试kafka\" class=\"headerlink\" title=\"2.本地调试kafka\"></a>2.本地调试kafka</h2><p>安装完毕后,生成安装路径和配置路径:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/Cellar/kafka/2.7.0/bin</span><br><span class=\"line\">/usr/local/etc/kafka/</span><br></pre></td></tr></table></figure>\n<p>启动zookeeper依赖:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.7.0/bin</span><br><span class=\"line\"></span><br><span class=\"line\">zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties</span><br></pre></td></tr></table></figure>\n<p>启动kafka:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.7.0/bin</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-server-start /usr/local/etc/kafka/server.properties</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>创建一个topic:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.7.0/bin</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--create #创建主题命令</span><br><span class=\"line\">--zookeeper localhost:2181 #指定zookeeper</span><br><span class=\"line\">--replication-factor 1 #指定副本个数</span><br><span class=\"line\">--partitions 1 #指定分区个数</span><br><span class=\"line\">--topic test #主题名称为test</span><br></pre></td></tr></table></figure>\n<p>查看topic:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n<p>创建一个生产者:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure>\n<p>创建一个消费者:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n<p>生产者发送消息即可在消费者接受消息</p>\n<h2 id=\"3-连接远程服务器kafka接收消息\"><a href=\"#3-连接远程服务器kafka接收消息\" class=\"headerlink\" title=\"3.连接远程服务器kafka接收消息\"></a>3.连接远程服务器kafka接收消息</h2><p>修改Kafka配置文件以下三个参数,listeners和host.name写上kafka broker主机的地址,这个地址不配置会造成远程无法访问:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/etc/kafka/server.properties</span><br><span class=\"line\"></span><br><span class=\"line\">zookeeper.connect=localhost:2181</span><br><span class=\"line\">listeners=PLAINTEXT://远程服务器IP:9092</span><br><span class=\"line\">host.name=远程服务器IP</span><br></pre></td></tr></table></figure>\n<p>启动消费者接收消息:topic为remote</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-consumer --bootstrap-server 远程服务器IP:9092 --topic remote</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实例生产者消费者\"><a href=\"#实例生产者消费者\" class=\"headerlink\" title=\"实例生产者消费者\"></a>实例生产者消费者</h1><h2 id=\"1-配置项目文件pom-xml安装依赖\"><a href=\"#1-配置项目文件pom-xml安装依赖\" class=\"headerlink\" title=\"1.配置项目文件pom.xml安装依赖\"></a>1.配置项目文件pom.xml安装依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;kafka_2.12&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>在pom.xml文件dependencies中加入以上kafka依赖并在项目命令行中执行以下命令安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-IDEA中实例生产者代码\"><a href=\"#2-IDEA中实例生产者代码\" class=\"headerlink\" title=\"2.IDEA中实例生产者代码\"></a>2.IDEA中实例生产者代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package kafka;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class=\"line\">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SendMessages &#123;</span><br><span class=\"line\">    //发送消息的topic,此处注意该topic需要在服务器已被创建</span><br><span class=\"line\">    public static final String WebhookChannelTopic = &quot;test-webhook&quot;;</span><br><span class=\"line\">    private final KafkaProducer&lt;String, String&gt; producer;</span><br><span class=\"line\">   </span><br><span class=\"line\">    public SendMessages() &#123;</span><br><span class=\"line\">        Properties props = new Properties();</span><br><span class=\"line\">        //指定代理服务器的地址,直接部署在对应的服务器所以直接本地访问</span><br><span class=\"line\">        props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class=\"line\">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class=\"line\">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class=\"line\">        producer = new KafkaProducer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void produce() &#123;</span><br><span class=\"line\">    \t//指定发送100W条数据</span><br><span class=\"line\">        int count = 1000000;</span><br><span class=\"line\">        ExecutorService executor = Executors.newFixedThreadPool(4);</span><br><span class=\"line\">        for (int i = 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">            final String key = String.valueOf(i);</span><br><span class=\"line\">            final String kafkaMsg = &quot;test-webhook-&quot; + i;</span><br><span class=\"line\">            executor.submit(new Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void run() &#123;</span><br><span class=\"line\">                    producer.send(new ProducerRecord&lt;String, String&gt;(WebhookChannelTopic, kafkaMsg));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SendMessages a = new SendMessages();</span><br><span class=\"line\">        a.produce();</span><br><span class=\"line\">        System.out.println(&quot;success&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包jar文件在服务器运行程序\"><a href=\"#打包jar文件在服务器运行程序\" class=\"headerlink\" title=\"打包jar文件在服务器运行程序\"></a>打包jar文件在服务器运行程序</h1><h2 id=\"1-开始打包-方法一\"><a href=\"#1-开始打包-方法一\" class=\"headerlink\" title=\"1.开始打包(方法一)\"></a>1.开始打包(方法一)</h2><p><img src=\"https://img-blog.csdnimg.cn/2021040611514776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"开始打包\"></p>\n<h2 id=\"2-生成配置文件\"><a href=\"#2-生成配置文件\" class=\"headerlink\" title=\"2.生成配置文件\"></a>2.生成配置文件</h2><p>选择主类运行文件并生成配置文件MANIFEST.MF在项目的src路径下:<br><img src=\"https://img-blog.csdnimg.cn/2021040611555273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"生成配置文件\"><br><img src=\"https://img-blog.csdnimg.cn/2021040611584255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"jar文件\"></p>\n<h2 id=\"3-生成jar文件\"><a href=\"#3-生成jar文件\" class=\"headerlink\" title=\"3.生成jar文件\"></a>3.生成jar文件</h2><p>构建项目并打包生成jar文件:<br><img src=\"https://img-blog.csdnimg.cn/20210406134959868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"构建项目\"><br><img src=\"https://img-blog.csdnimg.cn/20210406135135476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"生成jar文件\"><br><img src=\"https://img-blog.csdnimg.cn/20210406135307499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"生成成功\"></p>\n<h2 id=\"4-利用org-apache-maven-plugins插件打包-方法二\"><a href=\"#4-利用org-apache-maven-plugins插件打包-方法二\" class=\"headerlink\" title=\"4.利用org.apache.maven.plugins插件打包(方法二)\"></a>4.利用org.apache.maven.plugins插件打包(方法二)</h2><p>在项目的pom.xml文件中<code>&lt;project&gt;&lt;/project&gt;</code>内插入以下代码(mainClass中填入自己运行类的包名和文件名):<br><img src=\"https://img-blog.csdnimg.cn/20210408142713759.png\" alt=\"包名\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">                &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">                &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">            &lt;executions&gt;</span><br><span class=\"line\">                &lt;execution&gt;</span><br><span class=\"line\">                    &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                    &lt;goals&gt;</span><br><span class=\"line\">                        &lt;goal&gt;shade&lt;/goal&gt;</span><br><span class=\"line\">                    &lt;/goals&gt;</span><br><span class=\"line\">                    &lt;configuration&gt;</span><br><span class=\"line\">                        &lt;transformers&gt;</span><br><span class=\"line\">                            &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</span><br><span class=\"line\">                                &lt;mainClass&gt;kafka.SendMessages&lt;/mainClass&gt;</span><br><span class=\"line\">                            &lt;/transformer&gt;</span><br><span class=\"line\">                        &lt;/transformers&gt;</span><br><span class=\"line\">                    &lt;/configuration&gt;</span><br><span class=\"line\">                &lt;/execution&gt;</span><br><span class=\"line\">            &lt;/executions&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<p>执行打包命令,打包成功后会生成jar文件在项目的target目录下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-scp到服务器运行\"><a href=\"#5-scp到服务器运行\" class=\"headerlink\" title=\"5.scp到服务器运行\"></a>5.scp到服务器运行</h2><p>cd到jar文件所在目录执行scp命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp xxx.jar root@xxx.xx.xx.xx:~</span><br></pre></td></tr></table></figure>\n<p>运行程序:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar xxx.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-测试消息发送成功\"><a href=\"#6-测试消息发送成功\" class=\"headerlink\" title=\"6.测试消息发送成功\"></a>6.测试消息发送成功</h2><p>可以在服务器起一个本地消费者:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd到服务器kafka的执行目录,具体步骤参考本地测试部分</span><br><span class=\"line\"></span><br><span class=\"line\">./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-webhook --from-beginning</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"kafka安装for-Mac\"><a href=\"#kafka安装for-Mac\" class=\"headerlink\" title=\"kafka安装for Mac\"></a>kafka安装for Mac</h1><h2 id=\"1-brew安装\"><a href=\"#1-brew安装\" class=\"headerlink\" title=\"1.brew安装\"></a>1.brew安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install kafka</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-本地调试kafka\"><a href=\"#2-本地调试kafka\" class=\"headerlink\" title=\"2.本地调试kafka\"></a>2.本地调试kafka</h2><p>安装完毕后,生成安装路径和配置路径:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/Cellar/kafka/2.7.0/bin</span><br><span class=\"line\">/usr/local/etc/kafka/</span><br></pre></td></tr></table></figure>\n<p>启动zookeeper依赖:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.7.0/bin</span><br><span class=\"line\"></span><br><span class=\"line\">zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties</span><br></pre></td></tr></table></figure>\n<p>启动kafka:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.7.0/bin</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-server-start /usr/local/etc/kafka/server.properties</span><br></pre></td></tr></table></figure>","more":"<p>创建一个topic:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/Cellar/kafka/2.7.0/bin</span><br><span class=\"line\"></span><br><span class=\"line\">kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--create #创建主题命令</span><br><span class=\"line\">--zookeeper localhost:2181 #指定zookeeper</span><br><span class=\"line\">--replication-factor 1 #指定副本个数</span><br><span class=\"line\">--partitions 1 #指定分区个数</span><br><span class=\"line\">--topic test #主题名称为test</span><br></pre></td></tr></table></figure>\n<p>查看topic:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-topics --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n<p>创建一个生产者:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-producer --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure>\n<p>创建一个消费者:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-consumer --bootstrap-server localhost:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n<p>生产者发送消息即可在消费者接受消息</p>\n<h2 id=\"3-连接远程服务器kafka接收消息\"><a href=\"#3-连接远程服务器kafka接收消息\" class=\"headerlink\" title=\"3.连接远程服务器kafka接收消息\"></a>3.连接远程服务器kafka接收消息</h2><p>修改Kafka配置文件以下三个参数,listeners和host.name写上kafka broker主机的地址,这个地址不配置会造成远程无法访问:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/etc/kafka/server.properties</span><br><span class=\"line\"></span><br><span class=\"line\">zookeeper.connect=localhost:2181</span><br><span class=\"line\">listeners=PLAINTEXT://远程服务器IP:9092</span><br><span class=\"line\">host.name=远程服务器IP</span><br></pre></td></tr></table></figure>\n<p>启动消费者接收消息:topic为remote</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kafka-console-consumer --bootstrap-server 远程服务器IP:9092 --topic remote</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"实例生产者消费者\"><a href=\"#实例生产者消费者\" class=\"headerlink\" title=\"实例生产者消费者\"></a>实例生产者消费者</h1><h2 id=\"1-配置项目文件pom-xml安装依赖\"><a href=\"#1-配置项目文件pom-xml安装依赖\" class=\"headerlink\" title=\"1.配置项目文件pom.xml安装依赖\"></a>1.配置项目文件pom.xml安装依赖</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependencies&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;kafka_2.12&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>\n<p>在pom.xml文件dependencies中加入以上kafka依赖并在项目命令行中执行以下命令安装:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-IDEA中实例生产者代码\"><a href=\"#2-IDEA中实例生产者代码\" class=\"headerlink\" title=\"2.IDEA中实例生产者代码\"></a>2.IDEA中实例生产者代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package kafka;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\">import java.util.concurrent.ExecutorService;</span><br><span class=\"line\">import java.util.concurrent.Executors;</span><br><span class=\"line\">import org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class=\"line\">import org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SendMessages &#123;</span><br><span class=\"line\">    //发送消息的topic,此处注意该topic需要在服务器已被创建</span><br><span class=\"line\">    public static final String WebhookChannelTopic = &quot;test-webhook&quot;;</span><br><span class=\"line\">    private final KafkaProducer&lt;String, String&gt; producer;</span><br><span class=\"line\">   </span><br><span class=\"line\">    public SendMessages() &#123;</span><br><span class=\"line\">        Properties props = new Properties();</span><br><span class=\"line\">        //指定代理服务器的地址,直接部署在对应的服务器所以直接本地访问</span><br><span class=\"line\">        props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span><br><span class=\"line\">        props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class=\"line\">        props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);</span><br><span class=\"line\">        producer = new KafkaProducer&lt;String, String&gt;(props);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void produce() &#123;</span><br><span class=\"line\">    \t//指定发送100W条数据</span><br><span class=\"line\">        int count = 1000000;</span><br><span class=\"line\">        ExecutorService executor = Executors.newFixedThreadPool(4);</span><br><span class=\"line\">        for (int i = 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">            final String key = String.valueOf(i);</span><br><span class=\"line\">            final String kafkaMsg = &quot;test-webhook-&quot; + i;</span><br><span class=\"line\">            executor.submit(new Runnable() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                @Override</span><br><span class=\"line\">                public void run() &#123;</span><br><span class=\"line\">                    producer.send(new ProducerRecord&lt;String, String&gt;(WebhookChannelTopic, kafkaMsg));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        SendMessages a = new SendMessages();</span><br><span class=\"line\">        a.produce();</span><br><span class=\"line\">        System.out.println(&quot;success&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"打包jar文件在服务器运行程序\"><a href=\"#打包jar文件在服务器运行程序\" class=\"headerlink\" title=\"打包jar文件在服务器运行程序\"></a>打包jar文件在服务器运行程序</h1><h2 id=\"1-开始打包-方法一\"><a href=\"#1-开始打包-方法一\" class=\"headerlink\" title=\"1.开始打包(方法一)\"></a>1.开始打包(方法一)</h2><p><img src=\"https://img-blog.csdnimg.cn/2021040611514776.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"开始打包\"></p>\n<h2 id=\"2-生成配置文件\"><a href=\"#2-生成配置文件\" class=\"headerlink\" title=\"2.生成配置文件\"></a>2.生成配置文件</h2><p>选择主类运行文件并生成配置文件MANIFEST.MF在项目的src路径下:<br><img src=\"https://img-blog.csdnimg.cn/2021040611555273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"生成配置文件\"><br><img src=\"https://img-blog.csdnimg.cn/2021040611584255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"jar文件\"></p>\n<h2 id=\"3-生成jar文件\"><a href=\"#3-生成jar文件\" class=\"headerlink\" title=\"3.生成jar文件\"></a>3.生成jar文件</h2><p>构建项目并打包生成jar文件:<br><img src=\"https://img-blog.csdnimg.cn/20210406134959868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"构建项目\"><br><img src=\"https://img-blog.csdnimg.cn/20210406135135476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"生成jar文件\"><br><img src=\"https://img-blog.csdnimg.cn/20210406135307499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70\" alt=\"生成成功\"></p>\n<h2 id=\"4-利用org-apache-maven-plugins插件打包-方法二\"><a href=\"#4-利用org-apache-maven-plugins插件打包-方法二\" class=\"headerlink\" title=\"4.利用org.apache.maven.plugins插件打包(方法二)\"></a>4.利用org.apache.maven.plugins插件打包(方法二)</h2><p>在项目的pom.xml文件中<code>&lt;project&gt;&lt;/project&gt;</code>内插入以下代码(mainClass中填入自己运行类的包名和文件名):<br><img src=\"https://img-blog.csdnimg.cn/20210408142713759.png\" alt=\"包名\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;build&gt;</span><br><span class=\"line\">    &lt;plugins&gt;</span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;configuration&gt;</span><br><span class=\"line\">                &lt;source&gt;1.8&lt;/source&gt;</span><br><span class=\"line\">                &lt;target&gt;1.8&lt;/target&gt;</span><br><span class=\"line\">            &lt;/configuration&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;plugin&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class=\"line\">            &lt;executions&gt;</span><br><span class=\"line\">                &lt;execution&gt;</span><br><span class=\"line\">                    &lt;phase&gt;package&lt;/phase&gt;</span><br><span class=\"line\">                    &lt;goals&gt;</span><br><span class=\"line\">                        &lt;goal&gt;shade&lt;/goal&gt;</span><br><span class=\"line\">                    &lt;/goals&gt;</span><br><span class=\"line\">                    &lt;configuration&gt;</span><br><span class=\"line\">                        &lt;transformers&gt;</span><br><span class=\"line\">                            &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</span><br><span class=\"line\">                                &lt;mainClass&gt;kafka.SendMessages&lt;/mainClass&gt;</span><br><span class=\"line\">                            &lt;/transformer&gt;</span><br><span class=\"line\">                        &lt;/transformers&gt;</span><br><span class=\"line\">                    &lt;/configuration&gt;</span><br><span class=\"line\">                &lt;/execution&gt;</span><br><span class=\"line\">            &lt;/executions&gt;</span><br><span class=\"line\">        &lt;/plugin&gt;</span><br><span class=\"line\">    &lt;/plugins&gt;</span><br><span class=\"line\">&lt;/build&gt;</span><br></pre></td></tr></table></figure>\n<p>执行打包命令,打包成功后会生成jar文件在项目的target目录下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-scp到服务器运行\"><a href=\"#5-scp到服务器运行\" class=\"headerlink\" title=\"5.scp到服务器运行\"></a>5.scp到服务器运行</h2><p>cd到jar文件所在目录执行scp命令:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp xxx.jar root@xxx.xx.xx.xx:~</span><br></pre></td></tr></table></figure>\n<p>运行程序:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar xxx.jar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-测试消息发送成功\"><a href=\"#6-测试消息发送成功\" class=\"headerlink\" title=\"6.测试消息发送成功\"></a>6.测试消息发送成功</h2><p>可以在服务器起一个本地消费者:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># cd到服务器kafka的执行目录,具体步骤参考本地测试部分</span><br><span class=\"line\"></span><br><span class=\"line\">./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-webhook --from-beginning</span><br></pre></td></tr></table></figure>"},{"title":"iTerm2+oh-my-zsh最全配置","date":"2021-09-30T02:57:47.000Z","_content":"# 安装前先看效果图\n\n![效果图](https://img-blog.csdnimg.cn/48edcbdf2daa430b887244c624919247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n<!--more-->\n\n## 一.安装[iTem2](https://iterm2.com/)\n点击标题即可下载,如果没有安装brew,执行下面命令一键安装brew并自动替换为国内镜像源\n```bash\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4e2f117e99af46c8b79e76597b379062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n## 二.安装[oh-my-zsh](https://ohmyz.sh/)\n可能会失败,多执行几遍到成功为止\n```bash\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" \n```\n\n## 三.安装[Powerline](https://powerline.readthedocs.io/en/latest/installation.html)\n首先需要安装pip命令(也可自行安装Python自带pip),再安装Powerline\n```bash\nsudo easy_install pip\npip install powerline-status\n```\n或者\n```bash\nbrew install python3\npip3 install powerline-status\n```\n\n## 四.安装 [Meslo](https://github.com/powerline/fonts) 字体库\n可直接复制下面代码片执行\n```bash\n# clone\ngit clone https://github.com/powerline/fonts.git --depth=1\n# install\ncd fonts\n./install.sh\n# clean-up a bit\ncd ..\nrm -rf fonts\n```\n安装完毕后,进入到iTem2配置页面进行配置:\n设置背景颜色\n![背景](https://img-blog.csdnimg.cn/c2c9e4f7c9ef467090534689aea6006d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n设置字体样式\n![字体样式](https://img-blog.csdnimg.cn/08449346236945b9b6351609ae45a77d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n设置command+.全局呼出\n![全局呼出](https://img-blog.csdnimg.cn/80e0d88ab25c432c88075c3d2937bd9f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n## 五.安装agnoster主题\n无需安装,直接配置即可\n\n```bash\ncd ~\nvim ~/.zshrc\n```\n找到ZSH_THEME,参数改成\"agnoster\"\n![修改参数](https://img-blog.csdnimg.cn/ddd26a64d4c947f4be88438178e2489c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n## 六.安装语法高亮\n\n```bash\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n```\n在根目录`.zshrc`插入(注意{your_system_name}需要替换你的系统用户名):\n\n```bash\nsource /Users/{your_system_name}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\nplugins=(\n  git\n  zsh-syntax-highlighting\n)\n```\n## 七.安装代码补全插件\n1、`zsh-completions`\n```bash\ngit clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions\n```\n在根目录`.zshrc`插入:\n\n```bash\nplugins=(\n  git\n  zsh-completions\n)\nautoload -U compinit && compinit\n```\n2、`zsh-autosuggestions`：补全的是历史输入的命令，点击方向键->即可补全\n\n```bash\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n在根目录`.zshrc`插入:\n\n```bash\nplugins=(\n  git\n  zsh-autosuggestions\n)\n```\n因为之前调整过背景色,这边默认是灰色,实际效果展示不出,所以要修改配置文件,调整自动补全的底色:\n打开文件:\n```bash\nvim ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\n```\n修改内容:\n\n```bash\nZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=blue'\n```\n![修改配色](https://img-blog.csdnimg.cn/884c4f8542a4404aae1115adda067684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n**注意:安装上述所有内容后,一定要执行`source ~/.zshrc`使配置生效**\n## 八.常用命令\n```bash\n# 查看shell\ncat /etc/shells\n# 更改shell\nchsh -s /bin/zsh\n# 查看当前shell\necho $SHELL\n```\n\n [1]参考文章地址:https://www.jianshu.com/p/246b844f4449\n","source":"_posts/iTerm2-oh-my-zsh最全配置.md","raw":"---\ntitle: iTerm2+oh-my-zsh最全配置\ndate: 2021-09-30 10:57:47\ntags: [iTem2, oh-my-zsh, Mac]\n---\n# 安装前先看效果图\n\n![效果图](https://img-blog.csdnimg.cn/48edcbdf2daa430b887244c624919247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n<!--more-->\n\n## 一.安装[iTem2](https://iterm2.com/)\n点击标题即可下载,如果没有安装brew,执行下面命令一键安装brew并自动替换为国内镜像源\n```bash\n/bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/4e2f117e99af46c8b79e76597b379062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n\n## 二.安装[oh-my-zsh](https://ohmyz.sh/)\n可能会失败,多执行几遍到成功为止\n```bash\nsh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" \n```\n\n## 三.安装[Powerline](https://powerline.readthedocs.io/en/latest/installation.html)\n首先需要安装pip命令(也可自行安装Python自带pip),再安装Powerline\n```bash\nsudo easy_install pip\npip install powerline-status\n```\n或者\n```bash\nbrew install python3\npip3 install powerline-status\n```\n\n## 四.安装 [Meslo](https://github.com/powerline/fonts) 字体库\n可直接复制下面代码片执行\n```bash\n# clone\ngit clone https://github.com/powerline/fonts.git --depth=1\n# install\ncd fonts\n./install.sh\n# clean-up a bit\ncd ..\nrm -rf fonts\n```\n安装完毕后,进入到iTem2配置页面进行配置:\n设置背景颜色\n![背景](https://img-blog.csdnimg.cn/c2c9e4f7c9ef467090534689aea6006d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n设置字体样式\n![字体样式](https://img-blog.csdnimg.cn/08449346236945b9b6351609ae45a77d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n设置command+.全局呼出\n![全局呼出](https://img-blog.csdnimg.cn/80e0d88ab25c432c88075c3d2937bd9f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n## 五.安装agnoster主题\n无需安装,直接配置即可\n\n```bash\ncd ~\nvim ~/.zshrc\n```\n找到ZSH_THEME,参数改成\"agnoster\"\n![修改参数](https://img-blog.csdnimg.cn/ddd26a64d4c947f4be88438178e2489c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n## 六.安装语法高亮\n\n```bash\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n```\n在根目录`.zshrc`插入(注意{your_system_name}需要替换你的系统用户名):\n\n```bash\nsource /Users/{your_system_name}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\nplugins=(\n  git\n  zsh-syntax-highlighting\n)\n```\n## 七.安装代码补全插件\n1、`zsh-completions`\n```bash\ngit clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:=~/.oh-my-zsh/custom}/plugins/zsh-completions\n```\n在根目录`.zshrc`插入:\n\n```bash\nplugins=(\n  git\n  zsh-completions\n)\nautoload -U compinit && compinit\n```\n2、`zsh-autosuggestions`：补全的是历史输入的命令，点击方向键->即可补全\n\n```bash\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n在根目录`.zshrc`插入:\n\n```bash\nplugins=(\n  git\n  zsh-autosuggestions\n)\n```\n因为之前调整过背景色,这边默认是灰色,实际效果展示不出,所以要修改配置文件,调整自动补全的底色:\n打开文件:\n```bash\nvim ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh\n```\n修改内容:\n\n```bash\nZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=blue'\n```\n![修改配色](https://img-blog.csdnimg.cn/884c4f8542a4404aae1115adda067684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center)\n**注意:安装上述所有内容后,一定要执行`source ~/.zshrc`使配置生效**\n## 八.常用命令\n```bash\n# 查看shell\ncat /etc/shells\n# 更改shell\nchsh -s /bin/zsh\n# 查看当前shell\necho $SHELL\n```\n\n [1]参考文章地址:https://www.jianshu.com/p/246b844f4449\n","slug":"iTerm2-oh-my-zsh最全配置","published":1,"updated":"2021-10-11T08:25:31.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw5tfheb00041r016x6s88vu","content":"<h1 id=\"安装前先看效果图\"><a href=\"#安装前先看效果图\" class=\"headerlink\" title=\"安装前先看效果图\"></a>安装前先看效果图</h1><p><img src=\"https://img-blog.csdnimg.cn/48edcbdf2daa430b887244c624919247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"效果图\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"一-安装iTem2\"><a href=\"#一-安装iTem2\" class=\"headerlink\" title=\"一.安装iTem2\"></a>一.安装<a href=\"https://iterm2.com/\">iTem2</a></h2><p>点击标题即可下载,如果没有安装brew,执行下面命令一键安装brew并自动替换为国内镜像源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/4e2f117e99af46c8b79e76597b379062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"二-安装oh-my-zsh\"><a href=\"#二-安装oh-my-zsh\" class=\"headerlink\" title=\"二.安装oh-my-zsh\"></a>二.安装<a href=\"https://ohmyz.sh/\">oh-my-zsh</a></h2><p>可能会失败,多执行几遍到成功为止</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-安装Powerline\"><a href=\"#三-安装Powerline\" class=\"headerlink\" title=\"三.安装Powerline\"></a>三.安装<a href=\"https://powerline.readthedocs.io/en/latest/installation.html\">Powerline</a></h2><p>首先需要安装pip命令(也可自行安装Python自带pip),再安装Powerline</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo easy_install pip</span><br><span class=\"line\">pip install powerline-status</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install python3</span><br><span class=\"line\">pip3 install powerline-status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-安装-Meslo-字体库\"><a href=\"#四-安装-Meslo-字体库\" class=\"headerlink\" title=\"四.安装 Meslo 字体库\"></a>四.安装 <a href=\"https://github.com/powerline/fonts\">Meslo</a> 字体库</h2><p>可直接复制下面代码片执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clone</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class=\"line\"><span class=\"comment\"># install</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> fonts</span><br><span class=\"line\">./install.sh</span><br><span class=\"line\"><span class=\"comment\"># clean-up a bit</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">rm -rf fonts</span><br></pre></td></tr></table></figure>\n<p>安装完毕后,进入到iTem2配置页面进行配置:<br>设置背景颜色<br><img src=\"https://img-blog.csdnimg.cn/c2c9e4f7c9ef467090534689aea6006d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"背景\"><br>设置字体样式<br><img src=\"https://img-blog.csdnimg.cn/08449346236945b9b6351609ae45a77d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"字体样式\"><br>设置command+.全局呼出<br><img src=\"https://img-blog.csdnimg.cn/80e0d88ab25c432c88075c3d2937bd9f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"全局呼出\"></p>\n<h2 id=\"五-安装agnoster主题\"><a href=\"#五-安装agnoster主题\" class=\"headerlink\" title=\"五.安装agnoster主题\"></a>五.安装agnoster主题</h2><p>无需安装,直接配置即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">vim ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>找到ZSH_THEME,参数改成”agnoster”<br><img src=\"https://img-blog.csdnimg.cn/ddd26a64d4c947f4be88438178e2489c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"修改参数\"></p>\n<h2 id=\"六-安装语法高亮\"><a href=\"#六-安装语法高亮\" class=\"headerlink\" title=\"六.安装语法高亮\"></a>六.安装语法高亮</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>\n<p>在根目录<code>.zshrc</code>插入(注意{your_system_name}需要替换你的系统用户名):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /Users/&#123;your_system_name&#125;/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  zsh-syntax-highlighting</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"七-安装代码补全插件\"><a href=\"#七-安装代码补全插件\" class=\"headerlink\" title=\"七.安装代码补全插件\"></a>七.安装代码补全插件</h2><p>1、<code>zsh-completions</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-completions <span class=\"variable\">$&#123;ZSH_CUSTOM:=~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions</span><br></pre></td></tr></table></figure>\n<p>在根目录<code>.zshrc</code>插入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  zsh-completions</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">autoload</span> -U compinit &amp;&amp; compinit</span><br></pre></td></tr></table></figure>\n<p>2、<code>zsh-autosuggestions</code>：补全的是历史输入的命令，点击方向键-&gt;即可补全</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>\n<p>在根目录<code>.zshrc</code>插入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  zsh-autosuggestions</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>因为之前调整过背景色,这边默认是灰色,实际效果展示不出,所以要修改配置文件,调整自动补全的底色:<br>打开文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure>\n<p>修改内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=<span class=\"string\">&#x27;fg=blue&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/884c4f8542a4404aae1115adda067684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"修改配色\"><br><strong>注意:安装上述所有内容后,一定要执行<code>source ~/.zshrc</code>使配置生效</strong></p>\n<h2 id=\"八-常用命令\"><a href=\"#八-常用命令\" class=\"headerlink\" title=\"八.常用命令\"></a>八.常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看shell</span></span><br><span class=\"line\">cat /etc/shells</span><br><span class=\"line\"><span class=\"comment\"># 更改shell</span></span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"><span class=\"comment\"># 查看当前shell</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n\n<p> [1]参考文章地址:<a href=\"https://www.jianshu.com/p/246b844f4449\">https://www.jianshu.com/p/246b844f4449</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"安装前先看效果图\"><a href=\"#安装前先看效果图\" class=\"headerlink\" title=\"安装前先看效果图\"></a>安装前先看效果图</h1><p><img src=\"https://img-blog.csdnimg.cn/48edcbdf2daa430b887244c624919247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"效果图\"></p>","more":"<h2 id=\"一-安装iTem2\"><a href=\"#一-安装iTem2\" class=\"headerlink\" title=\"一.安装iTem2\"></a>一.安装<a href=\"https://iterm2.com/\">iTem2</a></h2><p>点击标题即可下载,如果没有安装brew,执行下面命令一键安装brew并自动替换为国内镜像源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/zsh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/4e2f117e99af46c8b79e76597b379062.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"二-安装oh-my-zsh\"><a href=\"#二-安装oh-my-zsh\" class=\"headerlink\" title=\"二.安装oh-my-zsh\"></a>二.安装<a href=\"https://ohmyz.sh/\">oh-my-zsh</a></h2><p>可能会失败,多执行几遍到成功为止</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-安装Powerline\"><a href=\"#三-安装Powerline\" class=\"headerlink\" title=\"三.安装Powerline\"></a>三.安装<a href=\"https://powerline.readthedocs.io/en/latest/installation.html\">Powerline</a></h2><p>首先需要安装pip命令(也可自行安装Python自带pip),再安装Powerline</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo easy_install pip</span><br><span class=\"line\">pip install powerline-status</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install python3</span><br><span class=\"line\">pip3 install powerline-status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-安装-Meslo-字体库\"><a href=\"#四-安装-Meslo-字体库\" class=\"headerlink\" title=\"四.安装 Meslo 字体库\"></a>四.安装 <a href=\"https://github.com/powerline/fonts\">Meslo</a> 字体库</h2><p>可直接复制下面代码片执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># clone</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class=\"line\"><span class=\"comment\"># install</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> fonts</span><br><span class=\"line\">./install.sh</span><br><span class=\"line\"><span class=\"comment\"># clean-up a bit</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">rm -rf fonts</span><br></pre></td></tr></table></figure>\n<p>安装完毕后,进入到iTem2配置页面进行配置:<br>设置背景颜色<br><img src=\"https://img-blog.csdnimg.cn/c2c9e4f7c9ef467090534689aea6006d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"背景\"><br>设置字体样式<br><img src=\"https://img-blog.csdnimg.cn/08449346236945b9b6351609ae45a77d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"字体样式\"><br>设置command+.全局呼出<br><img src=\"https://img-blog.csdnimg.cn/80e0d88ab25c432c88075c3d2937bd9f.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"全局呼出\"></p>\n<h2 id=\"五-安装agnoster主题\"><a href=\"#五-安装agnoster主题\" class=\"headerlink\" title=\"五.安装agnoster主题\"></a>五.安装agnoster主题</h2><p>无需安装,直接配置即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\">vim ~/.zshrc</span><br></pre></td></tr></table></figure>\n<p>找到ZSH_THEME,参数改成”agnoster”<br><img src=\"https://img-blog.csdnimg.cn/ddd26a64d4c947f4be88438178e2489c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"修改参数\"></p>\n<h2 id=\"六-安装语法高亮\"><a href=\"#六-安装语法高亮\" class=\"headerlink\" title=\"六.安装语法高亮\"></a>六.安装语法高亮</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>\n<p>在根目录<code>.zshrc</code>插入(注意{your_system_name}需要替换你的系统用户名):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /Users/&#123;your_system_name&#125;/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  zsh-syntax-highlighting</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"七-安装代码补全插件\"><a href=\"#七-安装代码补全插件\" class=\"headerlink\" title=\"七.安装代码补全插件\"></a>七.安装代码补全插件</h2><p>1、<code>zsh-completions</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-completions <span class=\"variable\">$&#123;ZSH_CUSTOM:=~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions</span><br></pre></td></tr></table></figure>\n<p>在根目录<code>.zshrc</code>插入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  zsh-completions</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"built_in\">autoload</span> -U compinit &amp;&amp; compinit</span><br></pre></td></tr></table></figure>\n<p>2、<code>zsh-autosuggestions</code>：补全的是历史输入的命令，点击方向键-&gt;即可补全</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>\n<p>在根目录<code>.zshrc</code>插入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(</span><br><span class=\"line\">  git</span><br><span class=\"line\">  zsh-autosuggestions</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>因为之前调整过背景色,这边默认是灰色,实际效果展示不出,所以要修改配置文件,调整自动补全的底色:<br>打开文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure>\n<p>修改内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=<span class=\"string\">&#x27;fg=blue&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/884c4f8542a4404aae1115adda067684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbnhpbW8=,size_16,color_FFFFFF,t_70#pic_center\" alt=\"修改配色\"><br><strong>注意:安装上述所有内容后,一定要执行<code>source ~/.zshrc</code>使配置生效</strong></p>\n<h2 id=\"八-常用命令\"><a href=\"#八-常用命令\" class=\"headerlink\" title=\"八.常用命令\"></a>八.常用命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看shell</span></span><br><span class=\"line\">cat /etc/shells</span><br><span class=\"line\"><span class=\"comment\"># 更改shell</span></span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"><span class=\"comment\"># 查看当前shell</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br></pre></td></tr></table></figure>\n\n<p> [1]参考文章地址:<a href=\"https://www.jianshu.com/p/246b844f4449\">https://www.jianshu.com/p/246b844f4449</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckw5tfhe700001r0184q0ff8q","tag_id":"ckw5tfhea00021r01003n6ws5","_id":"ckw5tfhed00071r01dujzgn4g"},{"post_id":"ckw5tfhe700001r0184q0ff8q","tag_id":"ckw5tfhec00051r01e8i07q9i","_id":"ckw5tfhed00081r01f0x9a7ai"},{"post_id":"ckw5tfhe900011r019mus1sz0","tag_id":"ckw5tfhea00021r01003n6ws5","_id":"ckw5tfhed000b1r01ddcn6dow"},{"post_id":"ckw5tfhe900011r019mus1sz0","tag_id":"ckw5tfhed00091r01didz9tst","_id":"ckw5tfhed000c1r013m0t4u6x"},{"post_id":"ckw5tfheb00031r0173sbfcaa","tag_id":"ckw5tfhed000a1r01d395fp0t","_id":"ckw5tfhee000f1r01cbeqhkuz"},{"post_id":"ckw5tfheb00031r0173sbfcaa","tag_id":"ckw5tfhed000d1r018epz396d","_id":"ckw5tfhee000g1r01ghmsepwz"},{"post_id":"ckw5tfheb00041r016x6s88vu","tag_id":"ckw5tfhed000e1r012zt10vxt","_id":"ckw5tfhee000j1r01eaa42wz9"},{"post_id":"ckw5tfheb00041r016x6s88vu","tag_id":"ckw5tfhee000h1r011j6kec0t","_id":"ckw5tfhee000k1r01djjtfw3j"},{"post_id":"ckw5tfheb00041r016x6s88vu","tag_id":"ckw5tfhed000d1r018epz396d","_id":"ckw5tfhee000l1r01gcnxba83"}],"Tag":[{"name":"Docker","_id":"ckw5tfhea00021r01003n6ws5"},{"name":"Linux","_id":"ckw5tfhec00051r01e8i07q9i"},{"name":"alpine","_id":"ckw5tfhed00091r01didz9tst"},{"name":"kafka","_id":"ckw5tfhed000a1r01d395fp0t"},{"name":"Mac","_id":"ckw5tfhed000d1r018epz396d"},{"name":"iTem2","_id":"ckw5tfhed000e1r012zt10vxt"},{"name":"oh-my-zsh","_id":"ckw5tfhee000h1r011j6kec0t"}]}}